Hi all,

last year we shared with you an draft for an [arithmetization of a zkEVM](https://ethresear.ch/t/a-zk-evm-specification/11549). Our stated goas were

- to support for all EVM opcodes including internal smart contract calls, error management and gas management,
- to execute bytecode as is,
- have minimal prover time.

[A few months later at L2Beat](https://youtu.be/jSC5fQZlWYQhttps://ethresear.ch/t/a-zk-evm-specification/11549 we were able to show off an implementation of the spec which was powerful enough to produce valid execution traces for calls to complex smart contracts (e.g. Uniswap) and working on evm bytecode.

In the mean time a lot of work has gone into the project. The specification has evolved quite substantially, and we provide the latest version of it below. The RAM and the stack have been rebuilt from the ground up: the RAM has been expanded to support all memory instructions and to communicate with exogenous data spaces such as bytecode in the ROM for deployments and code copy instructions. The stack design is much more straightforward than previously: this provides clarity and simplifies instruction dispatching (through plookups). We have added support for dynamic gas costs, out of bounds recognition for instructions/exceptions that need it, exception handling and appropriate instruction dispatching.

Our implementation is in progress and currently covers the stack, parts of the RAM, opcode executing modules such as binary, word comparison, arithmetic, storage. We have connected our implementation to the [EVM test suite](link). We produce both inner and outer proofs of execution using a tool developped by [AC team]

The current state of our zkEVM achieves [percentage, 90%+] compliance. [results breakdown from Franklin]